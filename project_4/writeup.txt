In order to implement the nba player API, I changed my php mysql query to no longer have wildcards around lookups, and then I used the encode_json and header() function to specify that i would be returning json, and that i was okay with any access origin and the GET method by specifying CORS headers. It was a simple fix for me since PA1 was already essentially working like that already.

To implement the lookup, I stored each url in azure table storage with a partition key of each (alphanumerical) word in the URL's title as a sha256 hash, with the rowkey being the sha256 hash of the entire url. With that entity i stored the full title and the full url itself so that I could retrieve those initial pieces of information so that they could be later displayed. When a user types something into the search bar, each of those words are broken up on spaces (trimming spaces, removing any symbols on the ends, and converting symbols to spaces in the middle) and then each word is hashed and looked up against my azure table. I then compile this list together with a linq statement that will walk through each title of each url and count instances of key words in the user's search query, ranking with most keywords at the top with least at the bottom. I return these in pages of 20 results per page as too many results all at once will throw cause an error to occur in the web application and would ultimately cause a bad UX as the user would have to look through too many results all at once. In order to implement pages on the client side, I put some buttons in at the bottom that a user can use to navigate pages. They can be a little broken at times, but I was spending too much time working on the logic to get them right, and this is a server-side class, so i moved on. I would like to go back at some point and get them to work perfectly, but oh well.

In order to implement caching, I used the built in HttpRuntime.Cache to place things in a cache with a 5 minute timeout, so anything that hasn't been looked up in 5 minutes will die out from the cache.

For monetization, I used Chitika to put ads on the page. I placed the ad along the top of the page and only after a user has searched for at least one thing. This way, it isn't too obtrusive, yet still gets the word out about various products for companys who advertise through Chitika.